// Code generated by proroc-gen-graphql, DO NOT EDIT.
package backend

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_SignUpRequest   *graphql.Object      // message SignUpRequest in greeter.proto
	gql__type_SignUpReply     *graphql.Object      // message SignUpReply in greeter.proto
	gql__type_LoginRequest    *graphql.Object      // message LoginRequest in greeter.proto
	gql__type_LoginReply      *graphql.Object      // message LoginReply in greeter.proto
	gql__type_HelloRequest    *graphql.Object      // message HelloRequest in greeter.proto
	gql__type_HelloReply      *graphql.Object      // message HelloReply in greeter.proto
	gql__type_GoodbyeRequest  *graphql.Object      // message GoodbyeRequest in greeter.proto
	gql__type_GoodbyeReply    *graphql.Object      // message GoodbyeReply in greeter.proto
	gql__input_SignUpRequest  *graphql.InputObject // message SignUpRequest in greeter.proto
	gql__input_SignUpReply    *graphql.InputObject // message SignUpReply in greeter.proto
	gql__input_LoginRequest   *graphql.InputObject // message LoginRequest in greeter.proto
	gql__input_LoginReply     *graphql.InputObject // message LoginReply in greeter.proto
	gql__input_HelloRequest   *graphql.InputObject // message HelloRequest in greeter.proto
	gql__input_HelloReply     *graphql.InputObject // message HelloReply in greeter.proto
	gql__input_GoodbyeRequest *graphql.InputObject // message GoodbyeRequest in greeter.proto
	gql__input_GoodbyeReply   *graphql.InputObject // message GoodbyeReply in greeter.proto
)

func Gql__type_SignUpRequest() *graphql.Object {
	if gql__type_SignUpRequest == nil {
		gql__type_SignUpRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_SignUpRequest",
			Fields: graphql.Fields{
				"username": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"password": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"email": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_SignUpRequest
}

func Gql__type_SignUpReply() *graphql.Object {
	if gql__type_SignUpReply == nil {
		gql__type_SignUpReply = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_SignUpReply",
			Fields: graphql.Fields{
				"userId": &graphql.Field{
					Type: graphql.String,
				},
				"message": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_SignUpReply
}

func Gql__type_LoginRequest() *graphql.Object {
	if gql__type_LoginRequest == nil {
		gql__type_LoginRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_LoginRequest",
			Fields: graphql.Fields{
				"username": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"password": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_LoginRequest
}

func Gql__type_LoginReply() *graphql.Object {
	if gql__type_LoginReply == nil {
		gql__type_LoginReply = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_LoginReply",
			Fields: graphql.Fields{
				"token": &graphql.Field{
					Type: graphql.String,
				},
				"message": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_LoginReply
}

func Gql__type_HelloRequest() *graphql.Object {
	if gql__type_HelloRequest == nil {
		gql__type_HelloRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_HelloRequest",
			Fields: graphql.Fields{
				"name": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `Below line means the "name" field is required in GraphQL argument`,
				},
			},
		})
	}
	return gql__type_HelloRequest
}

func Gql__type_HelloReply() *graphql.Object {
	if gql__type_HelloReply == nil {
		gql__type_HelloReply = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_HelloReply",
			Fields: graphql.Fields{
				"message": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_HelloReply
}

func Gql__type_GoodbyeRequest() *graphql.Object {
	if gql__type_GoodbyeRequest == nil {
		gql__type_GoodbyeRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_GoodbyeRequest",
			Fields: graphql.Fields{
				"name": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `Below line means the "name" field is required in GraphQL argument`,
				},
			},
		})
	}
	return gql__type_GoodbyeRequest
}

func Gql__type_GoodbyeReply() *graphql.Object {
	if gql__type_GoodbyeReply == nil {
		gql__type_GoodbyeReply = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_GoodbyeReply",
			Fields: graphql.Fields{
				"message": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_GoodbyeReply
}

func Gql__input_SignUpRequest() *graphql.InputObject {
	if gql__input_SignUpRequest == nil {
		gql__input_SignUpRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_SignUpRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"username": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"password": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"email": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_SignUpRequest
}

func Gql__input_SignUpReply() *graphql.InputObject {
	if gql__input_SignUpReply == nil {
		gql__input_SignUpReply = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_SignUpReply",
			Fields: graphql.InputObjectConfigFieldMap{
				"userId": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"message": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_SignUpReply
}

func Gql__input_LoginRequest() *graphql.InputObject {
	if gql__input_LoginRequest == nil {
		gql__input_LoginRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_LoginRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"username": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"password": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_LoginRequest
}

func Gql__input_LoginReply() *graphql.InputObject {
	if gql__input_LoginReply == nil {
		gql__input_LoginReply = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_LoginReply",
			Fields: graphql.InputObjectConfigFieldMap{
				"token": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"message": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_LoginReply
}

func Gql__input_HelloRequest() *graphql.InputObject {
	if gql__input_HelloRequest == nil {
		gql__input_HelloRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_HelloRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"name": &graphql.InputObjectFieldConfig{
					Description: `Below line means the "name" field is required in GraphQL argument`,
					Type:        graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_HelloRequest
}

func Gql__input_HelloReply() *graphql.InputObject {
	if gql__input_HelloReply == nil {
		gql__input_HelloReply = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_HelloReply",
			Fields: graphql.InputObjectConfigFieldMap{
				"message": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_HelloReply
}

func Gql__input_GoodbyeRequest() *graphql.InputObject {
	if gql__input_GoodbyeRequest == nil {
		gql__input_GoodbyeRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_GoodbyeRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"name": &graphql.InputObjectFieldConfig{
					Description: `Below line means the "name" field is required in GraphQL argument`,
					Type:        graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_GoodbyeRequest
}

func Gql__input_GoodbyeReply() *graphql.InputObject {
	if gql__input_GoodbyeReply == nil {
		gql__input_GoodbyeReply = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_GoodbyeReply",
			Fields: graphql.InputObjectConfigFieldMap{
				"message": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_GoodbyeReply
}

// graphql__resolver_Greeter is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_Greeter struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_Greeter creates pointer of service struct
func new_graphql_resolver_Greeter(conn *grpc.ClientConn) *graphql__resolver_Greeter {
	return &graphql__resolver_Greeter{
		conn: conn,
		host: "localhost:8080",
		dialOptions: []grpc.DialOption{
			grpc.WithInsecure(),
		},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_Greeter) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_Greeter) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"hello": &graphql.Field{
			Type: Gql__type_HelloReply(),
			Args: graphql.FieldConfigArgument{
				"name": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					Description:  `Below line means the "name" field is required in GraphQL argument`,
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req HelloRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for hello")
				}
				client := NewGreeterClient(conn)
				resp, err := client.SayHello(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC SayHello")
				}
				return resp, nil
			},
		},
		"goodbye": &graphql.Field{
			Type: Gql__type_GoodbyeReply(),
			Args: graphql.FieldConfigArgument{
				"name": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					Description:  `Below line means the "name" field is required in GraphQL argument`,
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GoodbyeRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for goodbye")
				}
				client := NewGreeterClient(conn)
				resp, err := client.SayGoodbye(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC SayGoodbye")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_Greeter) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"login": &graphql.Field{
			Type: Gql__type_LoginReply(),
			Args: graphql.FieldConfigArgument{
				"username": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"password": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req LoginRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for login")
				}
				client := NewGreeterClient(conn)
				resp, err := client.Login(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC Login")
				}
				return resp, nil
			},
		},

		"signup": &graphql.Field{
			Type: Gql__type_SignUpReply(),
			Args: graphql.FieldConfigArgument{
				"username": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"password": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"email": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req SignUpRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for signup")
				}
				client := NewGreeterClient(conn)
				resp, err := client.SignUp(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC SignUp")
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterGreeterGraphqlHandler with *grpc.ClientConn manually.
func RegisterGreeterGraphql(mux *runtime.ServeMux) error {
	return RegisterGreeterGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
//	service Greeter {
//	   option (graphql.service) = {
//	       host: "host:port"
//	       insecure: true or false
//	   };
//
//	   ...with RPC definitions
//	}
func RegisterGreeterGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_Greeter(conn))
}
