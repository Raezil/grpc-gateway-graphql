// greeter.proto
syntax = "proto3";
package greeter;
option go_package = "./greeter";
import "graphql.proto";

service Greeter {
  // gRPC service information
  option (graphql.service) = {
    host: "localhost:8080"
    insecure: true
  };

  rpc SayHello (HelloRequest) returns (HelloReply) {
    // Here is plugin definition
    option (graphql.schema) = {
      type: QUERY   // declare as Query
      name: "hello" // query name
    };
  }

  rpc SayGoodbye (GoodbyeRequest) returns (GoodbyeReply) {
    // Here is plugin definition
    option (graphql.schema) = {
      type: QUERY     // declare as Query
      name: "goodbye" // query name
    };
  }

   rpc Login (LoginRequest) returns (LoginReply) {
    // Plugin definition
    option (graphql.schema) = {
      type: MUTATION  // declare as Mutation
      name: "login"   // mutation name
    };
  }

  rpc SignUp (SignUpRequest) returns (SignUpReply) {
    // Plugin definition
    option (graphql.schema) = {
      type: MUTATION   // declare as Mutation
      name: "signup"   // mutation name
    };
  } 
}

message HelloRequest {
  // Below line means the "name" field is required in GraphQL argument
  string name = 1 [(graphql.field) = {required: true}];
}

message HelloReply {
  string message = 1;
}

message GoodbyeRequest {
  // Below line means the "name" field is required in GraphQL argument
  string name = 1 [(graphql.field) = {required: true}];
}

message GoodbyeReply {
  string message = 1;
}

message LoginRequest {
  string username = 1 [(graphql.field) = {required: true}];
  string password = 2 [(graphql.field) = {required: true}];
}

message LoginReply {
  string token = 1;
  string message = 2;
}

message SignUpRequest {
  string username = 1 [(graphql.field) = {required: true}];
  string password = 2 [(graphql.field) = {required: true}];
  string email = 3 [(graphql.field) = {required: true}];
}

message SignUpReply {
  string userId = 1;
  string message = 2;
}